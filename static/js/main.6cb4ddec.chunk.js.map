{"version":3,"sources":["redux/reducers/eventsReducer.js","redux/reducers/index.js","redux/actions/type.js","redux/store.js","components/layout/template/index.js","components/layout/template/Template.js","redux/actions/eventsActions.js","helpers/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","events","combineReducers","calendar","state","arguments","length","undefined","action","type","console","log","Object","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","Template","connect","fetchEvents","dispatch","fetch","filePath","prefix","process","concat","startsWith","resolvePath","then","j","json","data","_ref","children","fetchEventsCallback","useCallback","useEffect","react_default","a","createElement","App","layout_template","Boolean","window","location","hostname","match","ReactDOM","render","es","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wPAEMA,EAAe,CAAEC,OAAQ,ICChBC,cAAgB,CAC7BC,SDAa,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBL,EAAcQ,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,OAAQC,EAAOC,MACb,IENsB,aFQpB,OADAC,QAAQC,IAAI,EAAGH,EAAOP,QACfW,OAAAC,EAAA,EAAAD,CAAA,GACFR,EADL,CACYH,OAAQO,EAAOP,SAG7B,QACE,OAAOG,MGPPU,EAAa,CAACC,KAQLC,EANDC,YACZC,EALmB,GAOnBC,YAAQC,IAAeC,WAAf,EAAmBP,KCTdQ,eCgBAC,YAFS,SAAAnB,GAAK,MAAK,CAAEH,OAAQG,IAI1C,CAAEoB,YChBuB,kBAAM,SAAAC,GAC/BC,MCLyB,SACzBC,GADyB,IAEzBC,EAFyBvB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAEhBwB,YAAuBC,OAAO,KAFd,OAGrBH,EAASI,WAAW,QAAUJ,EAAWC,EAAOE,OAAOH,GDErDK,CAAY,kBACfC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SACZF,KAAK,SAAAG,GAEJ,OAAOX,EAAS,CAAEhB,KJTE,aISgBR,OAAQmC,SDSnCb,CAbE,SAAAc,GAAuC,IAApCC,EAAoCD,EAApCC,SAAUd,EAA0Ba,EAA1Bb,YAAavB,EAAaoC,EAAbpC,OACnCsC,EAAsBC,sBAAY,WACtChB,KACC,CAACA,IAKJ,OAJAiB,oBAAU,WACRF,KACA,CAACA,IACH7B,QAAQC,IAAIV,GACLyC,EAAAC,EAAAC,cAAA,YAAON,MGLDO,EAJH,WACV,OAAOH,EAAAC,EAAAC,cAACE,EAAD,kBCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCCNC,IAASC,OAAOX,EAAAC,EAAAC,cARF,kBACZF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAUtC,MAAOA,GACf0B,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAACY,EAAD,SAKU,MAAWC,SAASC,eAAe,SD8G7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.6cb4ddec.chunk.js","sourcesContent":["import { FETCH_DATA } from \"../actions/type\";\r\n\r\nconst initialState = { events: {} };\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_DATA:\r\n      console.log(1, action.events)\r\n      return {\r\n        ...state, events: action.events\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport eventsReducer from './eventsReducer';\r\n\r\nexport default combineReducers({\r\n  calendar: eventsReducer\r\n})","export const FETCH_DATA = \"FETCH_DATA\";\r\n\r\n\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import Template from './Template';\r\n\r\nexport default Template;","import React, { useEffect, useCallback } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchEvents } from \"../../../redux/actions/eventsActions\";\r\nimport \"./style/template.scss\";\r\n\r\nconst Template = ({ children, fetchEvents, events }) => {\r\n  const fetchEventsCallback = useCallback(() => {\r\n    fetchEvents();\r\n  }, [fetchEvents]);\r\n  useEffect(() => {\r\n    fetchEventsCallback();\r\n  },[fetchEventsCallback]);\r\n  console.log(events);\r\n  return <main>{children}</main>;\r\n};\r\n\r\nconst mapStateToProps = state => ({ events: state});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { fetchEvents }\r\n)(Template);\r\n","import { FETCH_DATA } from \"./type\";\r\n\r\nimport { resolvePath } from \"../../helpers/index\";\r\n\r\nexport const fetchEvents = () => dispatch => {\r\n  fetch(resolvePath(\"api/data.json\"))\r\n    .then(j => j.json())\r\n    .then(data => {\r\n      \r\n      return dispatch({ type: FETCH_DATA, events: data });\r\n    });\r\n};\r\n","export const resolvePath = (\r\n  filePath,\r\n  prefix = process.env.PUBLIC_URL.concat(\"/\")\r\n) => (filePath.startsWith(\"http\") ? filePath : prefix.concat(filePath));\r\n\r\nexport const capitalizeFirst = str =>\r\nstr.charAt(0).toUpperCase() + str.slice(1).toLowerCase();","import React from \"react\";\r\n\r\nimport Template from \"./components/layout/template\";\r\n\r\nconst App = () => {\r\n  return <Template>calendar</Template>;\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport store from \"./redux/store\";\r\n\r\nimport \"./styles/main.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst Index = () => (\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<Index />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}